{"version":3,"sources":["./src/app/forget/forget.page.html","./src/app/forget/forget.module.ts","./src/app/forget/forget.page.scss","./src/app/forget/forget.page.ts","./src/app/services/ui/loading.service.ts"],"names":[],"mappings":"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","file":"forget-forget-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n    <ion-toolbar>\\n        <ion-title>{{_translate.instant('login.reset_password')}}</ion-title>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button defaultHref=\\\"/login\\\" text=\\\"\\\" color=\\\"primary\\\" icon=\\\"arrow-back\\\"></ion-back-button>\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content> </ion-content>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ForgetPage } from './forget.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ForgetPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ReactiveFormsModule\n  ],\n  declarations: [ForgetPage]\n})\nexport class ForgetPageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2ZvcmdldC9mb3JnZXQucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { ToastService } from '../services/ui/toast.service';\nimport { ApiService } from '../services/api.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NavController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { LoadingService } from '../services/ui/loading.service';\n\n@Component({\n  selector: 'app-forget',\n  templateUrl: './forget.page.html',\n  styleUrls: ['./forget.page.scss']\n})\nexport class ForgetPage implements OnInit {\n  public passForm: FormGroup;\n\n  constructor(\n    public toastUI: ToastService,\n    public apiService: ApiService,\n    public formBuilder: FormBuilder,\n    private navCtrl: NavController,\n    public _translate: TranslateService,\n    private loadingUI: LoadingService\n  ) {\n    this.passForm = formBuilder.group({\n      username: ['', [Validators.required, Validators.minLength(5)]]\n    });\n  }\n\n  ngOnInit() {}\n\n  doForget() {\n    if (this.passForm.valid) {\n      const passData = {\n        password: this.passForm.get('password').value\n      };\n      this.loadingUI.simpleLoading();\n      this.apiService.forgetPass(passData).subscribe(\n        (userInfo: any) => {\n          // console.log(userInfo);\n\n          if (userInfo && userInfo.token && userInfo.user) {\n            setTimeout(() => {\n              this.loadingUI.loadingDismiss();\n              this.navCtrl.navigateRoot('/login');\n            }, 2000);\n          }\n        },\n        error => {\n          // console.log(error);\n          this.loadingUI.loadingDismiss();\n          this.toastUI.simpleToast(\n            this._translate.instant('general.general_error'),\n            'danger',\n            2000\n          );\n        }\n      );\n    } else {\n      this.loadingUI.loadingDismiss();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LoadingController } from '@ionic/angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoadingService {\n  constructor(public loadingController: LoadingController) {}\n\n  async simpleLoading() {\n    const loading = await this.loadingController.create({\n      translucent: true\n    });\n    await loading.present();\n  }\n\n  async loadingDismiss() {\n    this.loadingController.dismiss();\n  }\n}\n"],"sourceRoot":""}